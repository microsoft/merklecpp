name: Continuous Integration

on:
  push:
    branches:
      - main
      - 'releases/**'
    tags:
      - 'merklecpp-*'
      - 'v*'
  pull_request:

jobs:
  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-18.04]
        build_type: [Debug, Release]
        compiler: [g++, clang++, clang++-8]
        include:
          - os: windows-latest
            build_type: Debug
            compiler: msvc
          - os: windows-latest
            build_type: Release
            compiler: msvc

    steps:
    - name: Install packages
      run: sudo apt install libmbedtls-dev doctest-dev clang-8
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04'

    - uses: actions/checkout@v2

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build/${{ matrix.build_type }}

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build/${{ matrix.build_type }}
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          cmake $GITHUB_WORKSPACE -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DTESTS=ON -DOPENSSL=ON -DMBEDTLS=ON
        else
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DTESTS=ON
        fi

    - name: Build
      working-directory: ${{github.workspace}}/build/${{ matrix.build_type }}
      shell: bash
      run: cmake --build . --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{github.workspace}}/build/${{ matrix.build_type }}
      shell: bash
      run: ctest -C ${{ matrix.build_type }}
